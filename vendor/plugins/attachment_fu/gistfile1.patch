Index: lib/technoweenie/attachment_fu/backends/file_system_backend.rb
===================================================================
--- lib/technoweenie/attachment_fu/backends/file_system_backend.rb (revision 15741)
+++ lib/technoweenie/attachment_fu/backends/file_system_backend.rb (working copy)
@@ -60,9 +60,11 @@
         protected
           # Destroys the file.  Called in the after_destroy callback
           def destroy_file
-            FileUtils.rm full_filename
-            # remove directory also if it is now empty
-            Dir.rmdir(File.dirname(full_filename)) if (Dir.entries(File.dirname(full_filename))-['.','..']).empty?
+            if filename?
+              FileUtils.rm full_filename
+              # remove directory also if it is now empty
+              Dir.rmdir(File.dirname(full_filename)) if (Dir.entries(File.dirname(full_filename))-['.','..']).empty?
+            end
           rescue
             logger.info "Exception destroying  #{full_filename.inspect}: [#{$!.class.name}] #{$1.to_s}"
             logger.warn $!.backtrace.collect { |b| " > #{b}" }.join("\n")
Index: lib/technoweenie/attachment_fu.rb
===================================================================
--- lib/technoweenie/attachment_fu.rb (revision 15741)
+++ lib/technoweenie/attachment_fu.rb (working copy)
@@ -303,7 +303,7 @@
 
       # Returns true if the attachment data will be written to the storage system on the next save
       def save_attachment?
-        File.file?(temp_path.to_s)
+        return File.file?(temp_path.to_s) if temp_path
       end
 
       # nil placeholder in case this field is used in a form.
@@ -344,13 +344,14 @@
       # An array of all the tempfile objects is stored so that the Tempfile instance is held on to until
       # it's not needed anymore.  The collection is cleared after saving the attachment.
       def temp_path
+        return nil if temp_paths.empty?
         p = temp_paths.first
         p.respond_to?(:path) ? p.path : p.to_s
       end
 
       # Gets an array of the currently used temp paths.  Defaults to a copy of #full_filename.
       def temp_paths
-        @temp_paths ||= (new_record? || !respond_to?(:full_filename) || !File.exist?(full_filename) ?
+        @temp_paths ||= (new_record? || !respond_to?(:full_filename) || filename.blank? || !File.exist?(full_filename) ?
           [] : [copy_to_temp_file(full_filename)])
       end